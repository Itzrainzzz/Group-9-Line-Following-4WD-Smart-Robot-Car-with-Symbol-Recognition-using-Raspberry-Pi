# Template Matching - Auto Photos Cropping 

import cv2
import os
import numpy as np

# === FOLDERS ===
INPUT_FOLDER = "/home/powerrangers/template_matching_w3/uncropped_images"
OUTPUT_FOLDER = "/home/powerrangers/template_matching_w3/cropped_images"
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

# === PADDING AROUND CROP (optional) ===
PADDING = 5

def auto_crop(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 100, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    if not contours:
        return image  # fallback: return original

    # Find the largest contour (assumed to be the arrow)
    largest = max(contours, key=cv2.contourArea)
    x, y, w, h = cv2.boundingRect(largest)

    # Apply padding and clip to image boundaries
    x = max(0, x - PADDING)
    y = max(0, y - PADDING)
    w = min(image.shape[1] - x, w + 2 * PADDING)
    h = min(image.shape[0] - y, h + 2 * PADDING)

    return image[y:y+h, x:x+w]

# === Process all images ===
for filename in os.listdir(INPUT_FOLDER):
    if filename.endswith(".jpg") or filename.endswith(".png"):
        img_path = os.path.join(INPUT_FOLDER, filename)
        image = cv2.imread(img_path)

        if image is None:
            print(f"Failed to load {filename}")
            continue

        cropped = auto_crop(image)
        save_path = os.path.join(OUTPUT_FOLDER, filename)
        cv2.imwrite(save_path, cropped)
        print(f"Cropped and saved: {save_path}")

print("\nAll images cropped and saved to:", OUTPUT_FOLDER)

