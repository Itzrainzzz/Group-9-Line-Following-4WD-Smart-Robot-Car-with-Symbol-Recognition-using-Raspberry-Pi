import RPi.GPIO as GPIO
import time
import math

# Motor GPIO Pin Configuration
IN1, IN2, ENA = 17, 18, 19  # Left Motor
IN3, IN4, ENB = 22, 23, 12  # Right Motor

# Encoder GPIO Pins
ENCODER_A = 21  # Left Wheel Encoder
ENCODER_B = 20  # Right Wheel Encoder

# Encoder Specifications
PULSES_PER_REV = 30  # HM encoder pulses per revolution
WHEEL_DIAMETER = 5.5  # cm
WHEEL_CIRCUMFERENCE = math.pi * WHEEL_DIAMETER  # cm

# Initialize pulse counters
left_pulse_count = 0
right_pulse_count = 0

# Setup GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup([IN1, IN2, ENA, IN3, IN4, ENB], GPIO.OUT)
GPIO.setup([ENCODER_A, ENCODER_B], GPIO.IN, pull_up_down=GPIO.PUD_UP)

# PWM Speed Control (0-100)
pwm_left = GPIO.PWM(ENA, 100) # Frequency of left motors
pwm_right = GPIO.PWM(ENB, 100) # Frequency of right motors
pwm_left.start(0)  # 0% speed
pwm_right.start(0)

def distance_count():
    start_time = time.time()

    last_state_left = GPIO.input(ENCODER_A)
    last_state_right = GPIO.input(ENCODER_B)

    global left_pulse_count, right_pulse_count

    while time.time() - start_time <= 1:  # Move for 1 second
        current_state_left = GPIO.input(ENCODER_A)
        current_state_right = GPIO.input(ENCODER_B)

        # Detect a state change (falling edge or rising edge)
        if current_state_left != last_state_left:
            left_pulse_count += 1
        if current_state_right != last_state_right:
            right_pulse_count += 1

        last_state_left = current_state_left
        last_state_right = current_state_right

    stop()

# Define Movement Functions
def move_forward():
    print("Moving Forward")
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)
    pwm_left.ChangeDutyCycle(50)
    pwm_right.ChangeDutyCycle(50)
    distance_count()

def move_backward():
    print("Moving Backward")
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.HIGH)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.HIGH)
    pwm_left.ChangeDutyCycle(50)
    pwm_right.ChangeDutyCycle(50)
    distance_count()

def turn_left():
    print("Turning Left")
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.HIGH)
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)
    pwm_left.ChangeDutyCycle(55)
    pwm_right.ChangeDutyCycle(55)
    distance_count()

def turn_right():
    print("Turning Right")
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.HIGH)
    pwm_left.ChangeDutyCycle(60)
    pwm_right.ChangeDutyCycle(60)
    distance_count()

def stop():
    print("Stopping")
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.LOW)
    
try:
    while True:
        command = input("Enter command (f=forward, b=backward, l=left, r=right, s=stop, q=quit): ").lower()
        if command == 'f':
            move_forward()
        elif command == 'b':
            move_backward()
        elif command == 'l':
            turn_left()
        elif command == 'r':
            turn_right()
        elif command == 's':
            stop()
        elif command == 'q':
            break
        else:
            print("Invalid command! Use f, b, l, r, or s.")

        # Calculate distance traveled
        left_distance = (left_pulse_count / PULSES_PER_REV) * WHEEL_CIRCUMFERENCE
        right_distance = (right_pulse_count / PULSES_PER_REV) * WHEEL_CIRCUMFERENCE
        average_distance = (left_distance + right_distance) / 2  # Average distance

        print(f"Left Distance: {left_distance:.2f} cm, Right Distance: {right_distance:.2f} cm, Average: {average_distance:.2f} cm")

except KeyboardInterrupt:
    print("\nStopping Robot")

finally:
    stop()
    GPIO.cleanup()
